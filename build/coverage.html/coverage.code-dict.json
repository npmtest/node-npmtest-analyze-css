{"/home/travis/build/npmtest/node-npmtest-analyze-css/test.js":"/* istanbul instrument in package npmtest_analyze_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-analyze-css/lib.npmtest_analyze_css.js":"/* istanbul instrument in package npmtest_analyze_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_analyze_css = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_analyze_css = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-analyze-css/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-analyze-css && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_analyze_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_analyze_css\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_analyze_css.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_analyze_css.rollup.js'] =\n            local.assetsDict['/assets.npmtest_analyze_css.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_analyze_css.__dirname + '/lib.npmtest_analyze_css.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/lib/index.js":"/**\n * analyze-css CommonJS module\n */\n'use strict';\n\nvar cssParser = require('css').parse,\n\tdebug = require('debug')('analyze-css'),\n\tfs = require('fs'),\n\tpath = require('path'),\n\tpreprocessors = new(require('./preprocessors'))(),\n\tslickParse = require('slick').parse,\n\tVERSION = require('./../package').version;\n\nfunction analyzer(css, options, callback) {\n\tvar res;\n\n\t// options can be omitted\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t\toptions = {};\n\t}\n\n\tthis.options = options;\n\tdebug('opts: %j', this.options);\n\n\tif (typeof css !== 'string') {\n\t\tcallback(this.error('css parameter passed is not a string!', analyzer.EXIT_CSS_PASSED_IS_NOT_STRING), null);\n\t\treturn;\n\t}\n\n\t// preprocess the CSS (issue #3)\n\tif (typeof options.preprocessor === 'string') {\n\t\tdebug('Using \"%s\" preprocessor', options.preprocessor);\n\n\t\tvar preprocessor = preprocessors.get(options.preprocessor);\n\n\t\ttry {\n\t\t\tcss = preprocessor.process(css, options);\n\t\t} catch (ex) {\n\t\t\tthrow new Error('Preprocessing failed: ' + ex);\n\t\t}\n\n\t\tdebug('Preprocessing completed');\n\t}\n\n\tres = this.analyze(css);\n\n\t// error handling\n\tif (res !== true) {\n\t\tcallback(res, null);\n\t\treturn;\n\t}\n\n\t// return the results\n\tres = {\n\t\tgenerator: 'analyze-css v' + VERSION,\n\t\tmetrics: this.metrics,\n\t};\n\n\t// disable offenders output if requested (issue #64)\n\tif (options.noOffenders !== true) {\n\t\tres.offenders = this.offenders;\n\t}\n\n\tcallback(null, res);\n}\n\nanalyzer.version = VERSION;\n\n// @see https://github.com/macbre/phantomas/issues/664\nanalyzer.path = path.normalize(__dirname + '/..');\nanalyzer.pathBin = analyzer.path + '/bin/analyze-css.js';\n\n// exit codes\nanalyzer.EXIT_NEED_OPTIONS = 2;\nanalyzer.EXIT_PARSING_FAILED = 251;\nanalyzer.EXIT_EMPTY_CSS = 252;\nanalyzer.EXIT_CSS_PASSED_IS_NOT_STRING = 253;\nanalyzer.EXIT_URL_LOADING_FAILED = 254;\nanalyzer.EXIT_FILE_LOADING_FAILED = 255;\n\nanalyzer.prototype = {\n\temitter: false,\n\ttree: false,\n\n\tmetrics: {},\n\toffenders: {},\n\n\terror: function(msg, code) {\n\t\tvar err = new Error(msg);\n\t\terr.code = code;\n\n\t\treturn err;\n\t},\n\n\t// emit given event\n\temit: function( /* eventName, arg1, arg2, ... */ ) {\n\t\t//debug('Event %s emitted', arguments[0]);\n\t\tthis.emitter.emit.apply(this.emitter, arguments);\n\t},\n\n\t// bind to a given event\n\ton: function(ev, fn) {\n\t\tthis.emitter.on(ev, fn);\n\t},\n\n\tsetMetric: function(name, value) {\n\t\tvalue = value || 0;\n\n\t\t//debug('setMetric(%s) = %d', name, value);\n\t\tthis.metrics[name] = value;\n\t},\n\n\t// increements given metric by given number (default is one)\n\tincrMetric: function(name, incr /* =1 */ ) {\n\t\tvar currVal = this.metrics[name] || 0;\n\t\tincr = incr || 1;\n\n\t\t//debug('incrMetric(%s) += %d', name, incr);\n\t\tthis.setMetric(name, currVal + incr);\n\t},\n\n\taddOffender: function(metricName, msg, position /* = undefined */ ) {\n\t\tif (typeof this.offenders[metricName] === 'undefined') {\n\t\t\tthis.offenders[metricName] = [];\n\t\t}\n\n\t\tthis.offenders[metricName].push({\n\t\t\t'message': msg,\n\t\t\t'position': position || this.currentPosition\n\t\t});\n\t},\n\n\tsetCurrentPosition: function(position) {\n\t\tthis.currentPosition = position;\n\t},\n\n\tinitRules: function() {\n\t\tvar debug = require('debug')('analyze-css:rules'),\n\t\t\tre = /\\.js$/,\n\t\t\trules = [];\n\n\t\t// init events emitter\n\t\tthis.emitter = new(require('events').EventEmitter)();\n\t\tthis.emitter.setMaxListeners(200);\n\n\t\t// load all rules\n\t\trules = fs.readdirSync(fs.realpathSync(__dirname + '/../rules/'))\n\t\t\t// filter out all non *.js files\n\t\t\t.filter(function(file) {\n\t\t\t\treturn re.test(file);\n\t\t\t})\n\t\t\t// remove file extensions to get just names\n\t\t\t.map(function(file) {\n\t\t\t\treturn file.replace(re, '');\n\t\t\t});\n\n\t\tdebug('Rules to be loaded: %s', rules.join(', '));\n\n\t\trules.forEach(function(name) {\n\t\t\tvar rule = require('./../rules/' + name);\n\t\t\trule(this);\n\n\t\t\tdebug('\"%s\" loaded: %s', name, rule.description || '-');\n\t\t}, this);\n\t},\n\n\tparseCss: function(css) {\n\t\tvar debug = require('debug')('analyze-css:parser');\n\t\tdebug('Going to parse %s kB of CSS', (css.length / 1024).toFixed(2));\n\n\t\tif (css.trim() === '') {\n\t\t\treturn this.error('Empty CSS was provided', analyzer.EXIT_EMPTY_CSS);\n\t\t}\n\n\t\tthis.tree = cssParser(css, {\n\t\t\t// errors are listed in the parsingErrors property instead of being thrown (#84)\n\t\t\tsilent: true\n\t\t});\n\n\t\tdebug('CSS parsed');\n\t\treturn true;\n\t},\n\n\tparseRules: function(rules) {\n\t\trules.forEach(function(rule, idx) {\n\t\t\tdebug('%j', rule);\n\n\t\t\t// store the default current position\n\t\t\t//\n\t\t\t// it will be used when this.addOffender is called from within the rule\n\t\t\t// it can be overridden by providing a \"custom\" position via a call to this.setCurrentPosition\n\t\t\tthis.setCurrentPosition(rule.position);\n\n\t\t\tswitch (rule.type) {\n\t\t\t\t// {\n\t\t\t\t//  \"type\":\"media\"\n\t\t\t\t//  \"media\":\"screen and (min-width: 1370px)\",\n\t\t\t\t//  \"rules\":[{\"type\":\"rule\",\"selectors\":[\"#foo\"],\"declarations\":[]}]\n\t\t\t\t// }\n\t\t\t\tcase 'media':\n\t\t\t\t\tthis.emit('media', rule.media, rule.rules);\n\n\t\t\t\t\t// now run recursively to parse rules within the media query\n\t\t\t\t\tif (rule.rules) {\n\t\t\t\t\t\tthis.parseRules(rule.rules);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emit('mediaEnd', rule.media, rule.rules);\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// {\n\t\t\t\t\t//  \"type\":\"rule\",\n\t\t\t\t\t//  \"selectors\":[\".ui-header .ui-btn-up-a\",\".ui-header .ui-btn-hover-a\"],\n\t\t\t\t\t//  \"declarations\":[{\"type\":\"declaration\",\"property\":\"border\",\"value\":\"0\"},{\"type\":\"declaration\",\"property\":\"background\",\"value\":\"none\"}]\n\t\t\t\t\t// }\n\t\t\t\tcase 'rule':\n\t\t\t\t\tif (!rule.selectors || !rule.declarations) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emit('rule', rule);\n\n\t\t\t\t\t// analyze each selector and declaration\n\t\t\t\t\trule.selectors.forEach(function(selector) {\n\t\t\t\t\t\tvar parsedSelector,\n\t\t\t\t\t\t\texpressions = [],\n\t\t\t\t\t\t\ti, len;\n\n\t\t\t\t\t\t// \"#features > div:first-child\" will become two expressions:\n\t\t\t\t\t\t//  {\"combinator\":\" \",\"tag\":\"*\",\"id\":\"features\"}\n\t\t\t\t\t\t//  {\"combinator\":\">\",\"tag\":\"div\",\"pseudos\":[{\"key\":\"first-child\",\"value\":null}]}\n\t\t\t\t\t\tparsedSelector = slickParse(selector)[0];\n\n\t\t\t\t\t\tif (typeof parsedSelector === 'undefined') {\n\t\t\t\t\t\t\tvar positionDump = \"Rule position start @ \" + rule.position.start.line + ':' + rule.position.start.column + \", end @ \" + rule.position.end.line + ':' + rule.position.end.column;\n\t\t\t\t\t\t\tthrow this.error('Unable to parse \"' + selector + '\" selector. ' + positionDump, analyzer.EXIT_PARSING_FAILED);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// convert object with keys to array with numeric index\n\t\t\t\t\t\tfor (i = 0, len = parsedSelector.length; i < len; i++) {\n\t\t\t\t\t\t\texpressions.push(parsedSelector[i]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.emit('selector', rule, selector, expressions);\n\n\t\t\t\t\t\texpressions.forEach(function(expression) {\n\t\t\t\t\t\t\tthis.emit('expression', selector, expression);\n\t\t\t\t\t\t}, this);\n\t\t\t\t\t}, this);\n\n\t\t\t\t\trule.declarations.forEach(function(declaration) {\n\t\t\t\t\t\tthis.setCurrentPosition(declaration.position);\n\n\t\t\t\t\t\tswitch (declaration.type) {\n\t\t\t\t\t\t\tcase 'declaration':\n\t\t\t\t\t\t\t\tthis.emit('declaration', rule, declaration.property, declaration.value);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'comment':\n\t\t\t\t\t\t\t\tthis.emit('comment', declaration.comment);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this);\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// {\"type\":\"comment\",\"comment\":\" Cached as static-css-r518-9b0f5ab4632defb55d67a1d672aa31bd120f4414 \"}\n\t\t\t\tcase 'comment':\n\t\t\t\t\tthis.emit('comment', rule.comment);\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// {\"type\":\"font-face\",\"declarations\":[{\"type\":\"declaration\",\"property\":\"font-family\",\"value\":\"myFont\"...\n\t\t\t\tcase 'font-face':\n\t\t\t\t\tthis.emit('font-face', rule);\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// {\"type\":\"import\",\"import\":\"url('/css/styles.css')\"}\n\t\t\t\tcase 'import':\n\t\t\t\t\tthis.emit('import', rule.import);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}, this);\n\t},\n\n\trun: function() {\n\t\tvar stylesheet = this.tree && this.tree.stylesheet,\n\t\t\trules = stylesheet && stylesheet.rules;\n\n\t\tthis.emit('stylesheet', stylesheet);\n\n\t\t// check for parsing errors (#84)\n\t\tstylesheet.parsingErrors.forEach(function(err) {\n\t\t\tdebug('error: %j', err);\n\n\t\t\tvar pos = {\n\t\t\t\tline: err.line,\n\t\t\t\tcolumn: err.column\n\t\t\t};\n\t\t\tthis.setCurrentPosition({\n\t\t\t\tstart: pos,\n\t\t\t\tend: pos\n\t\t\t});\n\n\t\t\tthis.emit('error', err);\n\t\t}, this);\n\n\t\tthis.parseRules(rules);\n\t},\n\n\tanalyze: function(css) {\n\t\tvar res,\n\t\t\tthen = Date.now();\n\n\t\tthis.metrics = {};\n\t\tthis.offenders = {};\n\n\t\t// load and init all rules\n\t\tthis.initRules();\n\n\t\t// parse CSS\n\t\tres = this.parseCss(css);\n\n\t\tif (res !== true) {\n\t\t\treturn res;\n\t\t}\n\n\t\tthis.emit('css', css);\n\n\t\t// now go through parsed CSS tree and emit events for rules\n\t\ttry {\n\t\t\tthis.run();\n\t\t} catch (ex) {\n\t\t\treturn ex;\n\t\t}\n\n\t\tthis.emit('report');\n\n\t\tdebug('Completed in %d ms', Date.now() - then);\n\t\treturn true;\n\t}\n};\n\nmodule.exports = analyzer;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/lib/preprocessors.js":"/**\n * A wrapper for preprocessors\n */\n'use strict';\n\nvar debug = require('debug')('analyze-css:preprocessors'),\n\tglob = require('glob');\n\nvar preprocessors = function() {\n\n};\n\npreprocessors.prototype = {\n\n\tget: function(name) {\n\t\treturn require(__dirname + '/preprocessors/' + name + '.js');\n\t},\n\n\t// return instances of all available preprocessors\n\tgetAll: function() {\n\t\tvar files,\n\t\t\tres = [];\n\n\t\tfiles = glob.sync(__dirname + '/preprocessors/*.js');\n\t\tdebug('Initializing...');\n\n\t\tif (Array.isArray(files)) {\n\t\t\tfiles.forEach(function(file) {\n\t\t\t\tres.push(require(file));\n\t\t\t});\n\t\t}\n\n\t\treturn res;\n\t},\n\n\t// get name of matching preprocessor\n\tfindMatchingByFileName: function(fileName) {\n\t\tvar matching = false;\n\n\t\tthis.getAll().forEach(function(preprocessor) {\n\t\t\tif (preprocessor.matchesFileName(fileName)) {\n\t\t\t\tmatching = preprocessor.name;\n\n\t\t\t\tdebug('%s matches \"%s\" preprocessor', fileName, matching);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\treturn matching;\n\t}\n};\n\nmodule.exports = preprocessors;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/bin/analyze-css.js":"#!/usr/bin/env node\n\n/**\n * analyze-css entry point\n *\n * @see https://github.com/macbre/analyze-css\n */\n'use strict';\n\nvar analyzer = require('./../lib/index'),\n\tdebug = require('debug')('analyze-css:bin'),\n\tprogram = require('optimist'),\n\trunner = require('./../lib/runner'),\n\tcssString = '',\n\targv = {},\n\trunnerOpts = {};\n\n// parse options\nprogram\n\t.usage('analyze-css --url <url> [options]')\n\t// mandatory\n\t.describe('url', 'Set URL of CSS to analyze').string('url')\n\t.describe('file', 'Set local CSS file to analyze').string('file')\n\t.describe('ignore-ssl-errors', 'Ignores SSL errors, such as expired or self-signed certificate errors').boolean('ignore-ssl-errors')\n\t.describe('pretty', 'Causes JSON with the results to be pretty-printed').boolean('pretty').alias('pretty', 'p')\n\t.describe('no-offenders', 'Show only the metrics without the offenders part').boolean('no-offenders').alias('no-offenders', 'N')\n\t.describe('auth-user', 'Sets the user name used for HTTP authentication').string('auth-user')\n\t.describe('auth-pass', 'Sets the password used for HTTP authentication').string('auth-pass')\n\t.describe('proxy', 'Sets the HTTP proxy').string('proxy').alias('proxy', 'x')\n\t// version / help\n\t.describe('version', 'Show version number and quit').boolean('version').alias('version', 'V')\n\t.describe('help', 'This help text').boolean('help').alias('help', 'h');\n\n// parse it\nargv = program.parse(process.argv);\n\ndebug('analyze-css v%s', analyzer.version);\ndebug('argv: %j', argv);\n\n// show version number\nif (argv.version === true) {\n\tconsole.log('analyze-css v%s', analyzer.version);\n\tprocess.exit(0);\n}\n\n// show help\nif (argv.help === true) {\n\tprogram.showHelp();\n\tprocess.exit(0);\n}\n\n// support stdin (issue #28)\nif (argv._ && argv._.indexOf('-') > -1) {\n\trunnerOpts.stdin = true;\n}\n// --url\nelse if (argv.url) {\n\trunnerOpts.url = argv.url;\n}\n// --file\nelse if (argv.file) {\n\trunnerOpts.file = argv.file;\n}\n// either --url or --file or - (stdin) needs to be provided\nelse {\n\tprogram.showHelp();\n\tprocess.exit(analyzer.EXIT_NEED_OPTIONS);\n}\n\nrunnerOpts.ignoreSslErrors = argv['ignore-ssl-errors'];\nrunnerOpts.noOffenders = argv['no-offenders'] || (argv.offenders === false);\nrunnerOpts.authUser = argv['auth-user'];\nrunnerOpts.authPass = argv['auth-pass'];\nrunnerOpts.proxy = argv.proxy;\n\ndebug('opts: %j', runnerOpts);\n\n// run the analyzer\nrunner(runnerOpts, function(err, res) {\n\tvar output, exitCode;\n\n\t// emit an error and die\n\tif (err) {\n\t\texitCode = err.code || 1;\n\t\tdebug('Exiting with exit code #%d', exitCode);\n\n\t\tconsole.error(err.toString());\n\t\tprocess.exit(exitCode);\n\t}\n\n\t// make offenders flat (and append position if possible - issue #25)\n\tif (typeof res.offenders !== 'undefined') {\n\t\tObject.keys(res.offenders).forEach(function(metricName) {\n\t\t\tres.offenders[metricName] = res.offenders[metricName].map(function(offender) {\n\t\t\t\tvar position = offender.position && offender.position.start;\n\t\t\t\treturn offender.message + (position ? ' @ ' + position.line + ':' + position.column : '');\n\t\t\t});\n\t\t});\n\t}\n\n\t// format the results\n\tif (argv.pretty === true) {\n\t\toutput = JSON.stringify(res, null, '  ');\n\t} else {\n\t\toutput = JSON.stringify(res);\n\t}\n\n\tprocess.stdout.write(output);\n});\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/lib/runner.js":"/**\n * Fetches remote asset / local CSS file and returns analyzer results\n *\n * Used internally by analyze-css \"binary\" to communicate with CommonJS module\n */\n'use strict';\n\nvar cli = require('cli'),\n\tdebug = require('debug')('analyze-css:runner'),\n\tfs = require('fs'),\n\tresolve = require('path').resolve,\n\tanalyzer = require('./index'),\n\tpreprocessors = new(require('./preprocessors'))();\n\n/**\n * Return user agent to be used by analyze-css when making HTTP requests (issue #75)\n */\nfunction getUserAgent() {\n\tvar format = require('util').format,\n\t\tversion = require('../package').version;\n\n\treturn format(\n\t\t'analyze-css/%s (%s %s, %s %s)',\n\t\tversion,\n\t\tprocess.release.name,\n\t\tprocess.version,\n\t\tprocess.platform,\n\t\tprocess.arch\n\t);\n}\n\n/**\n * Simplified implementation of \"request\" npm module\n *\n * @see https://www.npmjs.com/package/node-fetch\n */\nfunction request(requestOptions, callback) {\n\tvar debug = require('debug')('analyze-css:http'),\n\t\tfetch = require('node-fetch');\n\n\tdebug('GET %s', requestOptions.url);\n\tdebug('Options: %j', requestOptions);\n\n\tfetch(requestOptions.url, requestOptions).\n\tthen(function(resp) {\n\t\tdebug('HTTP %d %s', resp.status, resp.statusText);\n\t\tdebug('Headers: %j', resp.headers._headers);\n\n\t\tif (!resp.ok) {\n\t\t\tvar err = new Error('HTTP request failed: ' + (err ? err.toString() : 'received HTTP ' + resp.status + ' ' + resp.statusText));\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\treturn resp.text(); // a promise\n\t\t}\n\t}).\n\tthen(function(body) {\n\t\tdebug('Received %d bytes of CSS', body.length);\n\t\tcallback(null, body);\n\t}).\n\tcatch(function(err) {\n\t\tdebug(err);\n\t\tcallback(err);\n\t});\n}\n\n/**\n * Module's main function\n */\nfunction runner(options, callback) {\n\t// call CommonJS module\n\tvar analyzerOpts = {\n\t\t'noOffenders': options.noOffenders,\n\t\t'preprocessor': false,\n\t};\n\n\tfunction analyze(css) {\n\t\tnew analyzer(css, analyzerOpts, callback);\n\t}\n\n\tif (options.url) {\n\t\tdebug('Fetching remote CSS file: %s', options.url);\n\n\t\t// @see https://www.npmjs.com/package/node-fetch#options\n\t\tvar agentOptions = {},\n\t\t\trequestOptions = {\n\t\t\t\turl: options.url,\n\t\t\t\theaders: {\n\t\t\t\t\t'User-Agent': getUserAgent()\n\t\t\t\t}\n\t\t\t};\n\n\t\t// handle options\n\n\t\t// @see https://github.com/bitinn/node-fetch/issues/15\n\t\t// @see https://nodejs.org/api/https.html#https_https_request_options_callback\n\t\tif (options.ignoreSslErrors) {\n\t\t\tagentOptions.rejectUnauthorized = false;\n\t\t}\n\n\t\t// @see https://gist.github.com/cojohn/1772154\n\t\tif (options.authUser && options.authPass) {\n\t\t\trequestOptions.headers.Authorization = \"Basic \" + new Buffer(options.authUser + \":\" + options.authPass, \"utf8\").toString(\"base64\");\n\t\t}\n\n\t\t// @see https://nodejs.org/api/http.html#http_class_http_agent\n\t\tvar client = require(/^https:/.test(options.url) ? 'https' : 'http');\n\t\trequestOptions.agent = new client.Agent(agentOptions);\n\n\t\t// @see http://stackoverflow.com/a/5810547\n\t\toptions.proxy = options.proxy || process.env.HTTP_PROXY;\n\n\t\tif (options.proxy) {\n\t\t\tdebug('Using HTTP proxy: %s', options.proxy);\n\n\t\t\trequestOptions.agent = new(require('http-proxy-agent'))(options.proxy);\n\t\t}\n\n\t\trequest(requestOptions, function(err, css) {\n\t\t\tif (err) {\n\t\t\t\terr.code = analyzer.EXIT_URL_LOADING_FAILED;\n\n\t\t\t\tdebug(err);\n\t\t\t\tcallback(err);\n\t\t\t} else {\n\t\t\t\tanalyze(css);\n\t\t\t}\n\t\t});\n\t} else if (options.file) {\n\t\t// resolve to the full path\n\t\toptions.file = resolve(process.cwd(), options.file);\n\t\tdebug('Loading local CSS file: %s', options.file);\n\n\t\tfs.readFile(options.file, {\n\t\t\tencoding: 'utf-8'\n\t\t}, function(err, css) {\n\t\t\tif (err) {\n\t\t\t\terr = new Error('Loading CSS file failed: ' + err.toString());\n\t\t\t\terr.code = analyzer.EXIT_FILE_LOADING_FAILED;\n\n\t\t\t\tdebug(err);\n\t\t\t\tcallback(err);\n\t\t\t} else {\n\t\t\t\t// find the matching preprocessor and use it\n\t\t\t\tif (analyzerOpts.preprocessor === false) {\n\t\t\t\t\tanalyzerOpts.preprocessor = preprocessors.findMatchingByFileName(options.file);\n\t\t\t\t}\n\n\t\t\t\t// pass the name of the file being analyzed\n\t\t\t\tanalyzerOpts.file = options.file;\n\n\t\t\t\tanalyze(css);\n\t\t\t}\n\t\t});\n\t} else if (options.stdin) {\n\t\tdebug('Reading from stdin');\n\t\tcli.withStdin(analyze);\n\t}\n}\n\nmodule.exports = runner;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/data/prefixes.js":"#!/usr/bin/env node\n/**\n * Generates data for prefixes rule using data from autoprefixer\n *\n * @see https://github.com/ai/autoprefixer\n */\nvar autoprefixer = require('autoprefixer-core'),\n\tbrowserslist = require('browserslist'),\n\tdebug = require('debug')('analyze-css:prefixes'),\n\tfs = require('fs'),\n\tprefixes = autoprefixer.data.prefixes,\n\t// data\n\tbrowsersByPrefix = {},\n\tnamesByVendor = {},\n\tdata;\n\n// prepare data\ndata = {\n\tgenerated: (new Date()).toJSON().substr(0, 10) + ' using autoprefixer-core v' + (require('../node_modules/autoprefixer-core/package.json').version),\n\t// supported browsers, i.e. will keep venoder prefixes that they require\n\tbrowsers: browserslist().sort(),\n\t// list of prefixes: prefix / hash (keep: true / false, msg: reason, list of browsers)\n\tprefixes: {}\n};\n\ndebug('Generator: %s', data.generated);\ndebug('Supported browsers: %s', data.browsers.join(', '));\n\n// prepare vendors data\n// [prefix] => [supported browsers]\nObject.keys(autoprefixer.data.browsers).forEach(function(vendor) {\n\tvar vendorData = autoprefixer.data.browsers[vendor],\n\t\tprefix = vendorData.prefix;\n\n\tif (typeof browsersByPrefix[prefix] === 'undefined') {\n\t\tbrowsersByPrefix[prefix] = {\n\t\t\tnames: [],\n\t\t\tbrowsers: []\n\t\t};\n\t}\n\n\t// push all browsers matching vendor\n\tdata.browsers.forEach(function(browser) {\n\t\t// e.g. browser = 'ff 26'\n\t\tif (browser.split(' ')[0] === vendor) {\n\t\t\tbrowsersByPrefix[prefix].names.push(vendor);\n\t\t\tbrowsersByPrefix[prefix].browsers.push(browser);\n\t\t}\n\t});\n\n\t// \"and_uc\" : \"UC Browser for Android\"\n\tnamesByVendor[vendor] = vendorData.browser;\n});\n\ndebug('Browsers by prefix: %j' ,browsersByPrefix);\ndebug('Names by vendor: %j', namesByVendor);\n\nfunction getLatestVersions(browsers, oldest) {\n\tvar latest = {},\n\t\tret = [];\n\n\toldest = !!oldest;\n\n\tbrowsers.forEach(function(browser) {\n\t\tvar parts = browser.split(' '),\n\t\t\tvendor = parts[0],\n\t\t\tversion = parseFloat(parts[1]);\n\n\t\tif (oldest) {\n\t\t\t// the oldest one\n\t\t\tlatest[vendor] = Math.min(version, latest[vendor] || 1000);\n\t\t}\n\t\telse {\n\t\t\t// the latest version\n\t\t\tlatest[vendor] = Math.max(version, latest[vendor] || 0);\n\t\t}\n\t});\n\n\tObject.keys(latest).forEach(function(vendor) {\n\t\tret.push((namesByVendor[vendor] || vendor) + ' ' + latest[vendor]);\n\t});\n\n\treturn ret;\n}\n\n// iterate through prefixes\nObject.keys(prefixes).forEach(function(property) {\n\tvar propertyData = prefixes[property];\n\n\tif (propertyData.selector || propertyData.props) {\n\t\treturn;\n\t}\n\n\tObject.keys(browsersByPrefix).forEach(function(prefix) {\n\t\t// support browsers that should be checked against given prefix\n\t\tvar prefixBrowsers = browsersByPrefix[prefix].browsers,\n\t\t\tvendorNames = browsersByPrefix[prefix].names,\n\t\t\tbrowsers,\n\t\t\tkeep,\n\t\t\tmsg;\n\n\t\t// check which supported browsers require this prefix\n\t\tbrowsers = prefixBrowsers.filter(function(browser) {\n\t\t\treturn propertyData.browsers.indexOf(browser) > -1;\n\t\t});\n\n\t\t// given prefix never existed\n\t\tif (propertyData.mistakes && propertyData.mistakes.indexOf(prefix) > -1) {\n\t\t\tmsg = prefix + property + ' is a mistake';\n\t\t}\n\t\t// prefix no longer needed\n\t\telse if (browsers.length === 0) {\n\t\t\t// generate the list of old browsers requiring given prefix\n\t\t\tbrowsers = propertyData.browsers.filter(function(browser) {\n\t\t\t\treturn vendorNames.indexOf(browser.split(' ')[0]) > -1;\n\t\t\t});\n\n\t\t\tif (browsers.length > 0) {\n\t\t\t\tmsg = 'was required by ' + getLatestVersions(browsers).join(', ') + ' and earlier';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// special handling for -ms- prefixes\n\t\t\t\t// @see http://msdn.microsoft.com/en-us/library/ie/ms530752(v=vs.85).aspx\n\t\t\t\tmsg = 'prefix is no longer supported';\n\t\t\t}\n\t\t}\n\t\t// prefix still required by...\n\t\telse {\n\t\t\tkeep = true;\n\t\t\tmsg = 'required by ' + getLatestVersions(browsers, true).join(', ') + ' and later';\n\t\t}\n\n\t\tprefix = '-' + prefix + '-'; // \"mozborder-radius\" -> \"-moz-border-radius\"\n\n\t\tdebug('%j', browsers);\n\t\tdebug('%s: keep? %j (%s)', prefix + property, !!keep, msg);\n\n\t\tdata.prefixes[prefix + property] = {\n\t\t\tkeep: !!keep,\n\t\t\tmsg: msg\n\t\t};\n\t});\n});\n\n// store in JSON file\ndebug('Writing to a file...');\nfs.writeFileSync(__dirname + '/../rules/prefixes.json', JSON.stringify(data, null, '  '));\n\ndebug('Done');\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/lib/collection.js":"/**\n * Push items and count them\n */\n'use strict';\n\nfunction collection() {\n\tthis.items = {};\n}\n\ncollection.prototype = {\n\tpush: function(item) {\n\t\tif (typeof this.items[item] === 'undefined') {\n\t\t\tthis.items[item] = {\n\t\t\t\tcnt: 1\n\t\t\t};\n\t\t} else {\n\t\t\tthis.items[item].cnt++;\n\t\t}\n\t},\n\n\tsort: function() {\n\t\tvar newItems = {},\n\t\t\tsortedKeys;\n\n\t\t// sort in descending order (by cnt)\n\t\tsortedKeys = Object.keys(this.items).sort((function(a, b) {\n\t\t\treturn this.items[b].cnt - this.items[a].cnt;\n\t\t}).bind(this));\n\n\t\t// build new items dictionary\n\t\tsortedKeys.forEach(function(key) {\n\t\t\tnewItems[key] = this.items[key];\n\t\t}, this);\n\n\t\tthis.items = newItems;\n\t\treturn this;\n\t},\n\n\tforEach: function(callback) {\n\t\tObject.keys(this.items).forEach(function(key) {\n\t\t\tcallback(key, this.items[key].cnt);\n\t\t}, this);\n\t}\n};\n\nmodule.exports = collection;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/base64.js":"'use strict';\n\nvar format = require('util').format,\n\tMAX_LENGTH = 4 * 1024;\n\nfunction rule(analyzer) {\n\t// @see http://stackoverflow.com/a/11335500\n\tvar re = /data:.+\\/(.+);base64,(.*)\\)/;\n\tanalyzer.setMetric('base64Length');\n\n\tanalyzer.on('declaration', function(rule, property, value) {\n\t\tvar base64,\n\t\t\tbuf,\n\t\t\tmatches;\n\n\t\tif (re.test(value)) {\n\t\t\t// parse data URI\n\t\t\tmatches = value.match(re);\n\t\t\tbase64 = matches[2];\n\t\t\tbuf = new Buffer(base64, 'base64');\n\n\t\t\tanalyzer.incrMetric('base64Length', base64.length);\n\n\t\t\tif (base64.length > MAX_LENGTH) {\n\t\t\t\tanalyzer.addOffender('base64Length', format('%s { %s: ... } // base64: %s kB, raw: %s kB', rule.selectors.join(', '), property, (base64.length / 1024).toFixed(2), (buf.length / 1024).toFixed(2)));\n\t\t\t}\n\t\t}\n\t});\n}\n\nrule.description = 'Reports on base64-encoded images';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/bodySelectors.js":"'use strict';\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('redundantBodySelectors');\n\n\tanalyzer.on('selector', function(rule, selector, expressions) {\n\t\tvar noExpressions = expressions.length;\n\n\t\t// check more complex selectors only\n\t\tif (noExpressions < 2) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar firstTag = expressions[0].tag,\n\t\t\tfirstHasClass = !!expressions[0].classList,\n\t\t\tisDescendantCombinator = (expressions[1].combinator === '>'),\n\t\t\tisShortExpression = (noExpressions === 2),\n\t\t\tisRedundant = true; // always expect the worst ;)\n\n\t\t// first, let's find the body tag selector in the expression\n\t\tvar bodyIndex = expressions.\n\t\tmap(function(item) {\n\t\t\treturn item.tag;\n\t\t}).\n\t\tindexOf('body');\n\n\t\t// body selector not found - skip the rules that follow\n\t\tif (bodyIndex < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// matches \"html > body\"\n\t\t// matches \"html.modal-popup-mode body\" (issue #44)\n\t\tif ((firstTag === 'html') && (bodyIndex === 1) && (isDescendantCombinator || isShortExpression)) {\n\t\t\tisRedundant = false;\n\t\t}\n\t\t// matches \"body > .bar\" (issue #82)\n\t\telse if ((bodyIndex === 0) && isDescendantCombinator) {\n\t\t\tisRedundant = false;\n\t\t}\n\t\t// matches \"body.foo ul li a\"\n\t\telse if ((bodyIndex === 0) && firstHasClass) {\n\t\t\tisRedundant = false;\n\t\t}\n\t\t// matches \".has-modal > body\" (issue #49)\n\t\telse if (firstHasClass && (bodyIndex === 1) && isDescendantCombinator) {\n\t\t\tisRedundant = false;\n\t\t}\n\n\t\t// report he redundant body selector\n\t\tif (isRedundant) {\n\t\t\tanalyzer.incrMetric('redundantBodySelectors');\n\t\t\tanalyzer.addOffender('redundantBodySelectors', selector);\n\t\t}\n\t});\n}\n\nrule.description = 'Reports redundant body selectors';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/childSelectors.js":"'use strict';\n\nfunction rule(analyzer) {\n\t// definition of redundant child nodes selectors (see #51 for the initial idea):\n\t// ul li\n\t// ol li\n\t// table tr\n\t// table th\n\tvar redundantChildSelectors = {\n\t\t'ul': ['li'],\n\t\t'ol': ['li'],\n\t\t'select': ['option'],\n\t\t'table': ['tr', 'th'], // e.g. table can not be followed by any of tr / th\n\t\t'tr': ['td', 'th'],\n\t};\n\n\tanalyzer.setMetric('redundantChildNodesSelectors');\n\n\tanalyzer.on('selector', function(rule, selector, expressions) {\n\t\tvar noExpressions = expressions.length;\n\n\t\t// check more complex selectors only\n\t\tif (noExpressions < 2) {\n\t\t\treturn;\n\t\t}\n\n\t\t// converts \"ul#foo > li.test\" selector into ['ul', 'li'] list\n\t\tvar selectorNodeNames = expressions.map(function(item) {\n\t\t\treturn item.tag;\n\t\t});\n\n\t\tObject.keys(redundantChildSelectors).forEach(function(nodeName) {\n\t\t\tvar nodeIndex = selectorNodeNames.indexOf(nodeName),\n\t\t\t\tnextNode,\n\t\t\t\tcurExpression,\n\t\t\t\tcombinator,\n\t\t\t\tredundantNodes = redundantChildSelectors[nodeName];\n\n\t\t\tif ((nodeIndex > -1) && (nodeIndex < noExpressions - 1)) {\n\t\t\t\t// skip cases like the following: \"article > ul li\"\n\t\t\t\tif (expressions[nodeIndex].combinator !== ' ') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// we've found the possible offender, get the next node in the selector\n\t\t\t\t// and compare it against rules in redundantChildSelectors\n\t\t\t\tnextNode = selectorNodeNames[nodeIndex + 1];\n\n\t\t\t\tif (redundantNodes.indexOf(nextNode) > -1) {\n\t\t\t\t\t// skip selectors that match:\n\t\t\t\t\t// - by attributes - foo[class*=bar]\n\t\t\t\t\t// - by pseudo attributes - foo:lang(fo)\n\t\t\t\t\tcurExpression = expressions[nodeIndex];\n\n\t\t\t\t\tif (curExpression.pseudos || curExpression.attributes) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// only the following combinator can match:\n\t\t\t\t\t// ul li\n\t\t\t\t\t// ul > li\n\t\t\t\t\tcombinator = expressions[nodeIndex + 1].combinator;\n\n\t\t\t\t\tif ((combinator === ' ') || (combinator === '>')) {\n\t\t\t\t\t\tanalyzer.incrMetric('redundantChildNodesSelectors');\n\t\t\t\t\t\tanalyzer.addOffender('redundantChildNodesSelectors', selector);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\nrule.description = 'Reports redundant child nodes selectors';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/colors.js":"'use strict';\n\nvar collection = require('../lib/collection'),\n\tdebug = require('debug')('analyze-css:colors'),\n\tformat = require('util').format,\n\tonecolor = require('onecolor');\n\n/**\n * Extract CSS colors from given CSS property value\n */\nvar regex = /(((rgba?|hsl)\\([^\\)]+\\))|#(\\w{3,6}))/g;\n\nfunction extractColors(value) {\n\tvar matches = value.match(regex);\n\treturn matches || false;\n}\n\nfunction rule(analyzer) {\n\t// store unique colors with the counter\n\tvar colors = new collection();\n\n\tanalyzer.setMetric('colors');\n\n\tanalyzer.on('declaration', function(rule, property, value) {\n\t\tvar extractedColors = extractColors(value);\n\n\t\tif (extractedColors === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tdebug('%s: %s -> %j', property, value, extractedColors);\n\n\t\textractedColors.\n\t\tmap(function(item) {\n\t\t\tvar color = onecolor(item);\n\n\t\t\t// handle parsing errors\n\t\t\tif (color === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// return either rgba(0,0,0,0.25) or #000000\n\t\t\treturn (color.alpha() < 1.0) ? color.cssa() : color.hex();\n\t\t}).\n\t\tforEach(function(color) {\n\t\t\tif (color !== false) {\n\t\t\t\tcolors.push(color);\n\t\t\t}\n\t\t});\n\t});\n\n\tanalyzer.on('report', function() {\n\t\tanalyzer.setCurrentPosition(undefined);\n\n\t\tcolors.sort().forEach(function(color, cnt) {\n\t\t\tanalyzer.incrMetric('colors');\n\t\t\tanalyzer.addOffender('colors', format('%s (%d times)', color, cnt));\n\t\t});\n\t});\n}\n\nrule.description = 'Reports number of unique colors used in CSS';\nmodule.exports = rule;\n\n// expose for unit testing\nmodule.exports.extractColors = extractColors;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/comments.js":"'use strict';\n\nvar format = require('util').format,\n\tMAX_LENGTH = 256;\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('comments');\n\tanalyzer.setMetric('commentsLength');\n\n\tanalyzer.on('comment', function(comment) {\n\t\tanalyzer.incrMetric('comments');\n\t\tanalyzer.incrMetric('commentsLength', comment.length);\n\n\t\t// report too long comments\n\t\tif (comment.length > MAX_LENGTH) {\n\t\t\tanalyzer.addOffender('comments', format('\"%s\" is too long (%d characters)', comment.substr(0, 100), comment.length));\n\t\t}\n\t});\n}\n\nrule.description = 'Reports too long CSS comments';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/complex.js":"'use strict';\n\nvar COMPLEX_SELECTOR_THRESHOLD = 3;\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('complexSelectors');\n\n\t// #foo .bar ul li a\n\tanalyzer.on('selector', function(rule, selector, expressions) {\n\t\tif (expressions.length > COMPLEX_SELECTOR_THRESHOLD) {\n\t\t\tanalyzer.incrMetric('complexSelectors');\n\t\t\tanalyzer.addOffender('complexSelectors', selector);\n\t\t}\n\t});\n}\n\nrule.description = 'Reports too complex CSS selectors';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/duplicated.js":"'use strict';\n\nvar collection = require('../lib/collection'),\n\tdebug = require('debug')('analyze-css:duplicated'),\n\tformat = require('util').format;\n\nfunction rule(analyzer) {\n\tvar selectors = new collection(),\n\t\tmediaQueryStack = [],\n\t\tbrowserPrefixRegEx = /^-(moz|o|webkit|ms)-/;\n\n\tanalyzer.setMetric('duplicatedSelectors');\n\tanalyzer.setMetric('duplicatedProperties');\n\n\t// handle nested media queries\n\tanalyzer.on('media', function(query) {\n\t\tmediaQueryStack.push(query);\n\t\tdebug('push: %j', mediaQueryStack);\n\t});\n\n\tanalyzer.on('mediaEnd', function(query) {\n\t\tmediaQueryStack.pop(query);\n\t\tdebug('pop: %j', mediaQueryStack);\n\t});\n\n\t// register each rule's selectors\n\tanalyzer.on('rule', function(rule) {\n\t\tselectors.push(\n\t\t\t// @media foo\n\t\t\t(mediaQueryStack.length > 0 ? '@media ' + mediaQueryStack.join(' @media ') + ' ' : '') +\n\t\t\t// #foo\n\t\t\trule.selectors.join(', ')\n\t\t);\n\t});\n\n\t// find duplicated properties (issue #60)\n\tanalyzer.on('rule', function(rule) {\n\t\tvar propertiesHash = {};\n\n\t\tif (rule.declarations) {\n\t\t\trule.declarations.forEach(function(declaration) {\n\t\t\t\tvar propertyName;\n\n\t\t\t\tif (declaration.type === 'declaration') {\n\t\t\t\t\tpropertyName = declaration.property;\n\n\t\t\t\t\t// skip properties that require browser prefixes\n\t\t\t\t\t//  background-image:-moz-linear-gradient(...)\n\t\t\t\t\t//  background-image:-webkit-gradient(...)\n\t\t\t\t\tif (browserPrefixRegEx.test(declaration.value) === true) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// property was already used in the current selector - report it\n\t\t\t\t\tif (propertiesHash[propertyName] === true) {\n\t\t\t\t\t\t// report the position of the offending property\n\t\t\t\t\t\tanalyzer.setCurrentPosition(declaration.position);\n\n\t\t\t\t\t\tanalyzer.incrMetric('duplicatedProperties');\n\t\t\t\t\t\tanalyzer.addOffender('duplicatedProperties', format('%s {%s: %s}', rule.selectors.join(', '), declaration.property, declaration.value));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// mark given property as defined in the context of the current selector\n\t\t\t\t\t\tpropertiesHash[propertyName] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t// special handling for @font-face (#52)\n\t// include URL when detecting duplicates\n\tanalyzer.on('font-face', function(rule) {\n\t\trule.declarations.forEach(function(declaration) {\n\t\t\tif (declaration.property === 'src') {\n\t\t\t\tselectors.push('@font-face src: ' + declaration.value);\n\n\t\t\t\tdebug('special handling for @font-face, provided src: %s', declaration.value);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t});\n\n\tanalyzer.on('report', function() {\n\t\tanalyzer.setCurrentPosition(undefined);\n\n\t\tselectors.sort().forEach(function(selector, cnt) {\n\t\t\tif (cnt > 1) {\n\t\t\t\tanalyzer.incrMetric('duplicatedSelectors');\n\t\t\t\tanalyzer.addOffender('duplicatedSelectors', format('%s (%d times)', selector, cnt));\n\t\t\t}\n\t\t});\n\t});\n}\n\nrule.description = 'Reports duplicated CSS selectors and properties';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/emptyRules.js":"'use strict';\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('emptyRules');\n\n\tanalyzer.on('rule', function(rule) {\n\t\tvar properties = rule.declarations.filter(function(item) {\n\t\t\treturn item.type === 'declaration';\n\t\t});\n\n\t\tif (properties.length === 0) {\n\t\t\tanalyzer.incrMetric('emptyRules');\n\t\t\tanalyzer.addOffender('emptyRules', rule.selectors.join(', '));\n\t\t}\n\t});\n}\n\nrule.description = 'Total number of empty CSS rules';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/expressions.js":"'use strict';\n\nvar format = require('util').format;\n\nfunction rule(analyzer) {\n\tvar re = /^expression/i;\n\n\tanalyzer.setMetric('expressions');\n\n\tanalyzer.on('declaration', function(rule, property, value) {\n\t\tif (re.test(value)) {\n\t\t\tanalyzer.incrMetric('expressions');\n\t\t\tanalyzer.addOffender('expressions', format('%s {%s: %s}', rule.selectors.join(', '), property, value));\n\t\t}\n\t});\n}\n\nrule.description = 'Reports CSS expressions';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/ieFixes.js":"'use strict';\n\nvar format = require('util').format;\n\n/**\n * Rules below match ugly fixes for IE9 and below\n *\n * @see http://browserhacks.com/\n */\nfunction rule(analyzer) {\n\tvar re = {\n\t\tproperty: /^(\\*|-ms-filter)/,\n\t\tselector: /^(\\* html|html\\s?>\\s?body) /,\n\t\tvalue: /progid:DXImageTransform\\.Microsoft|!ie$/\n\t};\n\n\tanalyzer.setMetric('oldIEFixes');\n\n\t// * html // below IE7 fix\n\t// html>body // IE6 excluded fix\n\t// @see http://blogs.msdn.com/b/ie/archive/2005/09/02/460115.aspx\n\tanalyzer.on('selector', function(rule, selector) {\n\t\tif (re.selector.test(selector)) {\n\t\t\tanalyzer.incrMetric('oldIEFixes');\n\t\t\tanalyzer.addOffender('oldIEFixes', selector);\n\t\t}\n\t});\n\n\t// *foo: bar // IE7 and below fix\n\t// -ms-filter // IE9 and below specific property\n\t// !ie // IE 7 and below equivalent of !important\n\t// @see http://www.impressivewebs.com/ie7-ie8-css-hacks/\n\tanalyzer.on('declaration', function(rule, property, value) {\n\t\tif (re.property.test(property) || re.value.test(value)) {\n\t\t\tanalyzer.incrMetric('oldIEFixes');\n\t\t\tanalyzer.addOffender('oldIEFixes', format('%s {%s: %s}', rule.selectors.join(', '), property, value));\n\t\t}\n\t});\n}\n\nrule.description = 'Reports fixes for old versions of Internet Explorer (IE9 and below)';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/important.js":"'use strict';\n\nvar format = require('util').format;\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('importants');\n\n\tanalyzer.on('declaration', function(rule, property, value) {\n\t\tif (value.indexOf('!important') > -1) {\n\t\t\tanalyzer.incrMetric('importants');\n\t\t\tanalyzer.addOffender('importants', format('%s {%s: %s}', rule.selectors.join(', '), property, value));\n\t\t}\n\t});\n}\n\nrule.description = 'Number of properties with value forced by !important';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/import.js":"'use strict';\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('imports');\n\n\tanalyzer.on('import', function(url) {\n\t\tanalyzer.incrMetric('imports');\n\t\tanalyzer.addOffender('imports', url);\n\t});\n}\n\nrule.description = 'Number of @import rules';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/length.js":"'use strict';\n\nfunction rule(analyzer) {\n\tanalyzer.on('css', function(css) {\n\t\tanalyzer.setMetric('length', css.length);\n\t});\n}\n\nrule.description = 'Length of CSS file';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/mediaQueries.js":"'use strict';\n\nvar format = require('util').format;\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('mediaQueries');\n\n\tanalyzer.on('media', function(query, rules) {\n\t\tanalyzer.incrMetric('mediaQueries');\n\t\tanalyzer.addOffender('mediaQueries', format('@media %s (%d rules)', query, rules && rules.length || 0));\n\t});\n}\n\nrule.description = 'Reports media queries';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/minified.js":"'use strict';\n\n/**\n * Detect not minified CSS\n */\nfunction rule(analyzer) {\n\tanalyzer.setMetric('notMinified');\n\n\t/**\n\t * A simple CSS minification detector\n\t */\n\tfunction isMinified(css) {\n\t\t// analyze the first 1024 characters\n\t\tcss = css.trim().substring(0, 1024);\n\n\t\t// there should be no newline in minified file\n\t\treturn /\\n/.test(css) === false;\n\t}\n\n\tanalyzer.on('css', function(css) {\n\t\tanalyzer.setMetric('notMinified', isMinified(css) ? 0 : 1);\n\t});\n}\n\nrule.description = 'Reports not minified CSS ';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/multiClassesSelectors.js":"'use strict';\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('multiClassesSelectors');\n\n\tanalyzer.on('expression', function(selector, expression) {\n\t\tif (expression.classList && expression.classList.length > 1) {\n\t\t\tanalyzer.incrMetric('multiClassesSelectors');\n\t\t\tanalyzer.addOffender('multiClassesSelectors', '.' + expression.classList.join('.'));\n\t\t}\n\t});\n}\n\nrule.description = 'Reports selectors with multiple classes';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/parsingErrors.js":"'use strict';\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('parsingErrors');\n\n\tanalyzer.on('error', function(err) {\n\t\tanalyzer.incrMetric('parsingErrors');\n\t\tanalyzer.addOffender('parsingErrors', err.reason);\n\t});\n}\n\nrule.description = 'CSS parsing errors';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/propertyResets.js":"'use strict';\n\nvar debug = require('debug')('analyze-css:propertyResets'),\n\tformat = require('util').format,\n\tshorthandProperties = require('css-shorthand-properties');\n\n/**\n * Detect accidental property resets\n *\n * @see http://css-tricks.com/accidental-css-resets/\n */\nfunction rule(analyzer) {\n\tvar debug = require('debug');\n\n\tanalyzer.setMetric('propertyResets');\n\n\tanalyzer.on('selector', function(rule, selector) {\n\t\tvar declarations = rule.declarations || [],\n\t\t\tproperties;\n\n\t\t// prepare the list of properties used in this selector\n\t\tproperties = declarations.\n\t\tmap(function(declaration) {\n\t\t\treturn (declaration.type === 'declaration') ? declaration.property : false;\n\t\t}).\n\t\tfilter(function(item) {\n\t\t\treturn item !== false;\n\t\t});\n\n\t\tdebug('%s: %j', selector, properties);\n\n\t\t// iterate through all properties, expand shorthand properties and\n\t\t// check if there's no expanded version of it earlier in the array\n\t\tproperties.forEach(function(property, idx) {\n\t\t\tvar expanded;\n\n\t\t\t// skip if the current property is not the shorthand version\n\t\t\tif (typeof shorthandProperties.shorthandProperties[property] === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// property = 'margin'\n\t\t\t// expanded = [ 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ]\n\t\t\texpanded = shorthandProperties.expand(property);\n\t\t\tdebug('%s: %s', property, expanded.join(', '));\n\n\t\t\texpanded.forEach(function(expandedProperty) {\n\t\t\t\tvar propertyPos = properties.indexOf(expandedProperty);\n\n\t\t\t\tif (propertyPos > -1 && propertyPos < idx) {\n\t\t\t\t\tanalyzer.incrMetric('propertyResets');\n\t\t\t\t\tanalyzer.addOffender('propertyResets', format('%s: \"%s\" resets \"%s\" property set earlier', selector, property, expandedProperty));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n\nrule.description = 'Reports accidental property resets';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/qualified.js":"'use strict';\n\nfunction rule(analyzer) {\n\tanalyzer.setMetric('qualifiedSelectors');\n\n\t// @see https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Writing_efficient_CSS\n\tanalyzer.on('expression', function(selector, expression) {\n\t\tvar hasId = expression.id,\n\t\t\thasTag = expression.tag && expression.tag !== '*',\n\t\t\thasClass = expression.classList;\n\n\t\tif (\n\t\t\t// tag#id\n\t\t\t(hasId && hasTag) ||\n\t\t\t// .class#id\n\t\t\t(hasId && hasClass) ||\n\t\t\t// tag.class\n\t\t\t(hasClass && hasTag)\n\t\t) {\n\t\t\tanalyzer.incrMetric('qualifiedSelectors');\n\t\t\tanalyzer.addOffender('qualifiedSelectors', selector);\n\t\t}\n\t});\n}\n\nrule.description = 'Reports qualified selectors';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/specificity.js":"'use strict';\n\nvar debug = require('debug')('analyze-css:specificity'),\n\tspecificity = require('specificity'),\n\tstats = require('fast-stats').Stats;\n\nfunction rule(analyzer) {\n\tvar types = ['Id', 'Class', 'Tag'],\n\t\ttypesLen = types.length,\n\t\tvalues = [];\n\n\t// prepare metrics and stacks for values\n\ttypes.forEach(function(type) {\n\t\tanalyzer.setMetric('specificity' + type + 'Avg');\n\t\tanalyzer.setMetric('specificity' + type + 'Total');\n\n\t\tvalues.push(new stats());\n\t});\n\n\tanalyzer.on('selector', function(rule, selector, expressions) {\n\t\tvar selectorSpecificity = specificity.calculate(selector),\n\t\t\tparts;\n\n\t\tif (!selectorSpecificity) {\n\t\t\tdebug('not counted for %s!', selector);\n\t\t\treturn;\n\t\t}\n\n\t\t// parse the results\n\t\tparts = selectorSpecificity[0].specificity.\n\t\tsplit(',').\n\t\tslice(1).\n\t\tmap(function(i) {\n\t\t\treturn parseInt(i, 10);\n\t\t});\n\n\t\tdebug('%s: %s', selector, parts.join(''));\n\n\t\t// add each piece to a separate stack\n\t\tparts.forEach(function(val, idx) {\n\t\t\tvalues[idx].push(val);\n\t\t});\n\t});\n\n\tanalyzer.on('report', function() {\n\t\tdebug('Gathering stats...');\n\n\t\ttypes.forEach(function(type, idx) {\n\t\t\tanalyzer.setMetric('specificity' + type + 'Avg', parseFloat(values[idx].amean().toFixed(2)));\n\t\t\tanalyzer.setMetric('specificity' + type + 'Total', values[idx].Σ());\n\t\t});\n\n\t\tdebug('Done');\n\t});\n}\n\n// @see http://www.w3.org/TR/css3-selectors/#specificity\n// @see http://css-tricks.com/specifics-on-css-specificity/\nrule.description = 'Reports rules specificity';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/rules/stats.js":"'use strict';\n\nfunction rule(analyzer) {\n\tvar selectors = 0,\n\t\tselectorsLength = 0;\n\n\tanalyzer.setMetric('selectors');\n\tanalyzer.setMetric('selectorLengthAvg');\n\n\tanalyzer.setMetric('selectorsByAttribute');\n\tanalyzer.setMetric('selectorsByClass');\n\tanalyzer.setMetric('selectorsById');\n\tanalyzer.setMetric('selectorsByPseudo');\n\tanalyzer.setMetric('selectorsByTag');\n\n\tanalyzer.on('rule', function() {\n\t\tanalyzer.incrMetric('rules');\n\t});\n\n\tanalyzer.on('selector', function(rule, selector, expressions) {\n\t\tselectors += 1;\n\t\tselectorsLength += expressions.length;\n\t});\n\n\tanalyzer.on('declaration', function() {\n\t\tanalyzer.incrMetric('declarations');\n\t});\n\n\tanalyzer.on('expression', function(selector, expression) {\n\t\t// a[href]\n\t\tif (expression.attributes) {\n\t\t\tanalyzer.incrMetric('selectorsByAttribute');\n\t\t}\n\n\t\t// .bar\n\t\tif (expression.classList) {\n\t\t\tanalyzer.incrMetric('selectorsByClass');\n\t\t}\n\n\t\t// @foo\n\t\tif (expression.id) {\n\t\t\tanalyzer.incrMetric('selectorsById');\n\t\t}\n\n\t\t// a:hover\n\t\tif (expression.pseudos) {\n\t\t\tanalyzer.incrMetric('selectorsByPseudo');\n\t\t}\n\n\t\t// header\n\t\tif (expression.tag && expression.tag !== '*') {\n\t\t\tanalyzer.incrMetric('selectorsByTag');\n\t\t}\n\t});\n\n\tanalyzer.on('report', function() {\n\t\tanalyzer.setMetric('selectors', selectors);\n\t\tanalyzer.setMetric('selectorLengthAvg', selectorsLength / selectors);\n\t});\n}\n\nrule.description = 'Emit CSS stats';\nmodule.exports = rule;\n","/home/travis/build/npmtest/node-npmtest-analyze-css/node_modules/analyze-css/lib/preprocessors/sass.js":"/**\n * SASS preprocessor\n *\n * @see https://www.npmjs.org/package/node-sass\n */\n'use strict';\n\nvar debug = require('debug')('analyze-css:preprocessors:sass');\n\nmodule.exports = {\n\n\tname: 'sass',\n\tmatchesFileName: function(fileName) {\n\t\treturn /\\.(scss|sass)$/.test(fileName);\n\t},\n\tprocess: function(css, options) {\n\t\tvar path = require('path'),\n\t\t\tsass,\n\t\t\tout;\n\n\t\t// check the presense of the optional \"node-sass\" module (#118)\n\t\ttry {\n\t\t\tsass = require('node-sass');\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"Can't process SASS/SCSS, please run 'npm install node-sass'\");\n\t\t}\n\n\t\tvar includeDir = path.dirname(options.file);\n\t\tdebug('Using \"%s\" include path', includeDir);\n\n\t\ttry {\n\t\t\t// 1: try to parse using SCSS syntax (i.e. with brackets)\n\t\t\tdebug('Parsing using SCSS syntax');\n\n\t\t\tout = sass.renderSync({\n\t\t\t\tdata: css,\n\t\t\t\tindentedSyntax: false,\n\t\t\t\tincludePaths: [\n\t\t\t\t\tincludeDir\n\t\t\t\t]\n\t\t\t});\n\t\t} catch (e) {\n\t\t\t// 2: try to parse using SASS syntax (i.e. with indends) - issue #79\n\t\t\tdebug('Exception: %s', e.toString().trim());\n\t\t\tdebug('Parsing using SASS syntax as a fallback');\n\n\t\t\tout = sass.renderSync({\n\t\t\t\tdata: css,\n\t\t\t\tindentedSyntax: true,\n\t\t\t\tincludePaths: [\n\t\t\t\t\tincludeDir\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\n\t\treturn out.css.toString();\n\t}\n};\n"}